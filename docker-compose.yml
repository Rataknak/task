services:
  api-gateway:
    image: nimrathanak2006/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8090:8080"
    depends_on:
      - book-service    # ← NEW name
      - auth-service    # ← NEW name
    networks:
      - spring-microservices-network

  book-service:
    image: nimrathanak2006/book-service:latest

    container_name: task-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/taskdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=200620
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring-microservices-network

  auth-service:
    image: nimrathanak2006/auth-service:latest
    container_name: user-service
    ports:
      - "8091:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/userdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=200620
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring-microservices-network

  postgres:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 200620
      POSTGRES_DB: taskdb,userdb
    ports:
      - "5435:5432"
    networks:
      - spring-microservices-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - spring-microservices-network

networks:
  spring-microservices-network:
    driver: bridge

volumes:
  postgres_data:
